INTRODUCTION
    DpObject.php is the most important building block when you're
    making DutchPIPE enabled sites within the framework.

    In the end, every object in your DutchPIPE universe inherits
    the DpObject class. Most objects you'll make don't use DpObject
    directly but use classes built on top of DpObject, for example
    DpPage.

MAKING AN OBJECT
    You can construct a DutchPIPE object in two ways:
    1) Make a new instance of DpObject and call methods in it to set
    it up. For simple objects, this is all that is needed. For
    example:

    > $ob = get_current_dpuniverse()->newDpObject(DPUNIVERSE_STD_PATH
    >     . 'DpObject.php');
    > $ob->addId('flower', 'purple flower');
    > $ob->setTitle('purple flower');
    > $ob->setTitleImg(DPUNIVERSE_IMAGE_URL . 'flower.gif');
    > $ob->setBody('<img src="' . DPUNIVERSE_IMAGE_URL
    >     . 'flower_body.jpg" width="190" height="216" border="0" '
    >     . 'alt="" align="left" style="margin-right: 15px; '
    >     . 'border: solid 1px black" />It is the purple white flower '
    >     . 'of the Dutchman\'s Pipe.');

    2) My making a custom class that extends on DpObject.

    File: dpuniverse/obj/note.php
    > inherit(DPUNIVERSE_STD_PATH . 'DpObject.php');
    >
    > final class Note extends DpObject
    > {
    >     public function createDpObject()
    >     {
    >         $this->setTitle('small note');
    >         $this->setTitleImg(DPUNIVERSE_IMAGE_URL
    >             . 'smallnote.gif');
    >         $this->addId('note', 'paper note', 'small note',
    >             'small paper note', 'small, paper note',
    >             'a small note');
    >         $this->setBody('This is a small paper note. '
    >             'You can read it.<br />');
    >
    >         $this->addAction('read me!', 'read', 'actionRead');
    >     }
    >     etc.
    >}

    The class name should be the same as the filename, with the first
    letter capitalized.

    Note that because of PHP namespace limitations, currently the
    classname must be unique in your universe. We plan on supporting
    auto-class names.

    There are various methods you can call (like setTitle) or define
    (like createDpPage) which will be discussed next.


DEFINABLE METHODS
    When you create an object with the second option, the following
    methods are called by the system when you have implemented them:

    - public function createDpObject()

    Called when the object is created. You should use this to call the
    setup methods instead of __construct.

    - public function resetDpObject()

    Called at regular intervals (see DPUNIVERSE_RESET_CYCLE in
    dpuniverse-ini.php) by the system. You can do in this method
    whatever you like, for instance reset the state of the object.

    - function event($name)

    Called for certain events as defined in include/events.php.

CALLABLE METHODS
    /**
     * Removes this object
     *
     * The object is destroyed and no longer part of the universe.
     */
    function removeDpObject()

    /**
     * Moves this object into the inventory of another object
     *
     * @param   mixed   $target_ob  path or object to move into to
     * @param   boolean $simple     skip some checks
     * @return  int                 FALSE for success, an error code for failure
     */
    function moveDpObject(&$target_ob, $simple = FALSE)

    /**
     * Checks if an object is present in our inventory
     *
     * If $what is a string, searches for an object with that id. If $what is an
     * object, searches for the object. Searches are done in the inventory of
     * this object.
     *
     * @param      mixed     $what       string (id) or object to search for
     * @return     boolean   TRUE if $what is in our inventory, false otherwise
     */
    function isPresent($what)

    /**
     * Gets the object reference to the environment of this object
     *
     * @return     mixed     object reference or FALSE for no environment
     */
    function &getEnvironment()

    /**
     * Gets an array with object references to all objects in our inventory
     *
     * If this object contains no other objects, an empty array is returned.
     *
     * @return     array     object references to objects in our inventory
     */
    function &getInventory()

    /**
     * Calls the given method after the given number of seconds
     *
     * Use this to perform delayed method calls in this object. Note that
     * functions such as get_current_dpuser() can be totally different when the
     * method is called. Also note that the actual delay is not exact science.
     *
     * @param      string    $method     name of method to call in this object
     * @param      int d     $secs       delay in seconds
     */
    function setTimeout($method, $secs)

    /**
     * Gets the unique id for this object
     *
     * @return     string    the unique id for this object
     */
    function getUniqueId()

    /**
     * Sets an array of names used to refer to this object
     *
     * Overwrites previous set ids. Ids are case insensitive and all turned
     * into lowercase.
     *
     * @param      array     $ids        array of name strings
     */
    function setIds($ids)

    /**
     * Adds one or more ids for this object
     *
     * A single id can be added at a time, or an array with ids can be given,
     * or multiple arguments can be given (strings or array of strings).
     *
     * @param      string|array  $id     name string or array of name strings
     */
    function AddId($id)

    /**
     * Removes one or more ids for this object
     *
     * A single id can be removed at a time, or an array with ids can be given,
     * or multiple arguments can be given (strings or array of strings).
     *
     * @param      string|array  $id     name string or array of name strings
     */
    function RemoveId($id)

    /**
     * Returns the array of ids for this object, or an empty array for no ids
     *
     * @return     array     array of name strings
     */
    function getIds()

    /**
     * Checks if the given id is a valid id for this object
     *
     * @return     bool      TRUE if the id is valid, FALSE otherwise
     */
    function isId($id)

    /**
     * Sets the title for this object used as object labels, page titles, etc.
     *
     * Objects are visualized using two mechanisms: the object's "title" and
     * the object's "body". The title is used when the object is nearby, for
     * instance in the environment of a user that sees it. The body is used
     * when we're in the object (a page) or examining the object. In other
     * words, the object's title is a very abstract way to describe the object
     * when looking at it from a greater distance.
     *
     * In plain language, this function controls the avatar or object image,
     * and the label under it.
     *
     * The $title should be a short description like "barkeeper" without "a"
     * or "the" in front.
     *
     * The $title_img should be a URL to the image shown to represent this
     * object.
     *
     * The second argument, $type, should be a constant as defined in
     * include/title_types.php and is used by the framework to, for example,
     * construct lines such as "Lennert takes a cool, fresh beer" instead of
     * "A Lennert takes a cool fresh, beer" or "The Lennert takes a cool, fresh
     * beer".
     *
     * DPUNIVERSE_TITLE_TYPE_INDEFINITE - the title is indefinite, "a barkeeper"
     * DPUNIVERSE_TITLE_TYPE_DEFINITE - the title is definite, "the hulk"
     * DPUNIVERSE_TITLE_TYPE_NAME - the title is a name, "Lennert"
     * DPUNIVERSE_TITLE_TYPE_PLURAL - the title is plural, "sweets" (not yet
     * implemented)
     *
     * @param      string    $title      short description, "barkeeper"
     * @param      string    $type       noun type, use the constants above
     * @param      string    $title_img  URL to avatar or object image
     */
    public function setTitle($title, $type = FALSE, $title_img = FALSE)

    /**
     * Gets the object's title with optional prefixes such as 'a' and 'the'
     *
     * Gets the title as set with setTitle, for example "barkeeper" if no $type
     * is given.
     *
     * If $type is DPUNIVERSE_TITLE_TYPE_INDEFINITE, "a ..." or "an ..." is
     * put in front if the object's title type has been set to indefinite. So
     * for a barkeeper this returns "a barkeeper", for me it returns "Lennert".
     *
     * If $type is DPUNIVERSE_TITLE_TYPE_DEFINITE, "the" is put in front if the
     * object's title type is not DPUNIVERSE_TITLE_TYPE_NAME. So for a barkeeper
     * this returns "the barkeeper", for me it returns "Lennert".
     *
     * @param      string    $type       noun type, use the constants above
     * @return     string                the object's title
     */
    public function getTitle($type = NULL)

    /**
     * Sets the type of this object's title
     *
     * See: include/title_types.php
     *
     * @param      string    $type       noun type, use the constants above
     *
     */
    public function setTitleType($titleType)

    /**
     * Gets the type of this object's title
     *
     * See: include/title_types.php
     */
    public function getTitleType()

    /**
     * Sets URL to the avatar or other image represeting this object
     *
     * @param      string    $titleImg   URL to avatar or object image
     */
    public function setTitleImg($titleImg)

    /**
     * Gets URL to the avatar or other image represeting this object
     */
    public function getTitleImg()

    /**
     * Sets the HTML content of this object.
     *
     * When a single argument is given, sets the HTML content to the given text.
     *
     * Pairs of arguments can be given to set the content in other ways, with
     * the second argument the type, and the first the data (what the data is
     * depends on the type).
     *
     * Types are: string (default, raw data), file (read content of given
     * filename)
     *
     * Examples:
     * $this->setBody('Hello world');
     * $this->setBody('helloworld.html', 'file');
     * $this->setBody('Prefix', 'string', 'helloworld.html', 'file', 'Postfix',
     *     'string')
     *
     * @param       string    $str        Content data
     * @param       string    $type       Content type
     * @see         getBody, getBaseLong
     */
    public function setBody($body, $type = 'text')

    /**
     * Gets the HTML content of this object
     */
    public function getBody()

    /**
     * Gets the HTML "appearance" of this object
     *
     * Gets HTML to represent the object to another objects. That is, other
     * objects call this method in order to "see" it, and HTML is returned. How
     * an object is seen depends on how the object is related to the object that
     * is viewing it in terms of "physical" location.
     *
     * In other words, a level of 0 means this object is seen by something in
     * its inventory (a user sees a page). Level 1 means this object is seen by
     * an object in its environment (a user sees another user). Level 2 means
     * this object is in the inventory of the object that is seeing it.
     *
     * @param      int       $level           level of visibility
     * @param      boolean   $include_div     include div with id around HTML?
     * @param      object    $from            expiremental
     * @param      string    $displayMode     'abstract' or 'graphical'
     * @param      boolean   $displayTitlebar display title bar for pages?
     * @return     string    HTML "appearance" of this object
     */
    public function getAppearance($level = 0, $include_div = TRUE,
            $from = NULL, $displayMode = 'abstract',
            $displayTitlebar = TRUE, $elementId = 'dppage')

    /**
     * Adds a property with the given name
     *
     * Sets the value of the property to TRUE if no value was given, or
     * to the given value.
     */
    public function addProperty($propertyName)

    /**
     * Adds multiple properties with the given array of names
     *
     * Sets the value of the properties to TRUE if no array with values was
     * given, or with each corresponding value in the given array of values.
     */
    public function setProperties($propertyNames)

    /**
     * Removes a property with the given name, if it exists
     */
    public function removeProperty($propertyName)

    /**
     * Gets the value of the property with the given name
     *
     * If the property exists, returns TRUE if the property was set without
     * value, or a value if it was set with a value. Returns FALSE if the
     * property does not exist.
     */
    public function getProperty($propertyName)

    /**
     * Gets all properties set in this object
     */
    public function getProperties()

    /**
     * Gets a HTML navigation trail for this object
     *
     * By default, a 'Home' link is always present.
     */
    function getNavigationTrailHtml()

    /**
     * Adds an action to the object
     *
     * Use this method to have actions added to the menus you get when clicking
     * on items (the "action menu"), and at the same time to add actions you can
     * type. This method is a bit of a mess yet, with a horrible number of
     * parameters, and needs to be fleshed out more, please bear with me. See
     * DpLiving.php for some good examples.
     *
     * Each action must be added with three mandatory parameters: its title
     * in the menu ($actionMenu), its command line equivalent ($actionVerb),
     * and the method called in this object when a user or object performs the
     * action ($actionMethod).
     *
     * So note.php has the following line in its createDpObject method:
     * > $this->addAction('read me!', 'read', 'actionRead');
     *
     * When someone clicks on the note and selects 'read me!', or types
     * 'read [something]', method actionRead is called with two parameters:
     * > function actionRead($verb, $noun)
     * $verb contains 'read', $noun contains whatever the user typed, or the
     * objects unique id if the mouse was used (see the getUniqueId method).
     *
     * The following four parameters are optional, see include/actions.php for
     * constants used to pass these parameters.
     *
     * $actionOperant is used when you click to perform an action only, and
     * used to define on who the action operates, in other words, how the verb
     * noun command that is internally formed gets its noun. With the default
     * DP_ACTION_OPERANT_MENU, the noun becomes the object that carries the
     * action in its action menu, for example "object#41", a unique object id.
     * Where a user would type 'read note', clicking would generate
     * 'read object#41'.
     * With DP_ACTION_OPERANT_NONE, there is no noun, for example "laugh".
     * DP_ACTION_OPERANT_COMPLETE can be used to ask the user on who or what
     * the action must be performed, for example "give".
     *
     * $actionTarget is used to determine on which objects' action menus this
     * action must appear. This doesn't have to be this object, the default
     * DP_ACTION_TARGET_SELF. For a user object that defines actions, this would
     * be true for the action "laugh", it should appear in the action menu of
     * the user itself. With DP_ACTION_TARGET_LIVING the menu item appears on
     * other users and computer generated characters, for example action "kiss"
     * should not appear on the user but on anyone near. Likewise, with
     * DP_ACTION_TARGET_OBJINV and DP_ACTION_TARGET_OBJENV you can make the
     * action appear on any object in the users inventory or environment.
     *
     * $actionAuthorized defines what objects or users may perform the action if
     * the action is in their scope (see next).
     * By default, everybody may try to perform the action (although the method
     * that is called may forbid it anyway) and this option is set to
     * DP_ACTION_AUTHORIZED_ALL. With DP_ACTION_AUTHORIZED_REGISTERED, the
     * action becomes only available for registered users. Use
     * DP_ACTION_AUTHORIZED_ADMIN to restrict the action to your site
     * administrators.
     *
     * $actionScope defines which objects have access to the action to begin
     * with. With the default, DP_ACTION_SCOPE_ALL, the action becomes available
     * for the object to which is was added, but also all objects it contains or
     * in its environment. For example, the action "read" on a note uses this.
     * However, the action 'smile' added to a user object is designed so
     * the action becomes available for the user, not other objects nearby, by
     * using DP_ACTION_SCOPE_SELF. With DP_ACTION_SCOPE_ENVIRONMENT and
     * DP_ACTION_SCOPE_INVENTORY you can also restrict the scope.
     *
     * @param      string    $actionMenu       Title of clickable menu item
     * @param      boolean   $actionVerb       Alternative command to type
     * @param      object    $actionMethod     Method called to perform action
     * @param      string    $actionOperant    On who/what does it have effect?
     * @param      boolean   $actionTarget     Where should menu item appear?
     * @param      object    $actionAuthorized Who may perform this action?
     * @param      string    $actionScope      Who sees action to begin with?
     */
    final public function addAction($actionMenu, $actionVerb, $actionMethod,
            $actionOperant = DP_ACTION_OPERANT_MENU,
            $actionTarget = DP_ACTION_TARGET_SELF,
            $actionAuthorized = DP_ACTION_AUTHORIZED_ALL,
            $actionScope = DP_ACTION_SCOPE_ALL)

