<refentry id="{@id}">
    <refnamediv>
        <refname>Inner workings of DutchPIPE</refname>
        <refpurpose>
            HOW IT IS DONE - PHP SERVER AND AJAX ENGINE
        </refpurpose>
    </refnamediv>
    {@toc}
    <refsect1 id="{@id how}">
        <title>How Does DutchPIPE Work?</title>
        <para>
            DutchPIPE is technically based on two core concepts: a PHP server
            which runs all the time, handling a "universe" of objects, and an
            AJAX engine to communicate with the browsers of people on a
            DutchPIPE enabled site. When someone enters a page, the page
            retrieval system looks like this on a file/class level:
        </para>
        <para>
            User/Browser &larr;&rarr; <filename>public/dpclient.php</filename>
            &larr;&rarr; <classname>DpServer</classname> &larr;&rarr;
            <classname>DpUniverse</classname>
        </para>
        <para>
            When a browser makes a connection to the DutchPIPE site, it fetches
            a page from the <filename>dpuniverse/</filename> directory based on
            the 'location' part in the URL:
        </para>
        <para>
            http://dutchpipe.org/dpclient.php?location=/page/index.html
        </para>
        <para>
            <filename>/page/index.html</filename> is also the default if no or
            an invalid location is given.
            <filename>public/dpclient.php</filename> now makes a socket
            connection to the <classname>DpServer</classname> object (which is
            created from the class in <filename>lib/dpserver.php</filename>), to
            retrieve the page and return it to the browser.
        </para>
        <figure>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="/images/oldstyle.gif" width="395"
                        height="479" align="right" format="GIF"/>
                </imageobject>
                <textobject>
                    <phrase>Figure 1: Old style PHP page generation</phrase>
                </textobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="/images/newstyle.gif" width="395"
                        height="680" align="right" format="GIF"/>
                </imageobject>
                <textobject>
                    <phrase>Figure 2: DutchPIPE style</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>
            The <classname>DpServer</classname> object is created from a
            PHP script that runs all the time, allowing
            <classname>DpServer</classname> to wait for connections from
            <filename>public/dpclient.php</filename>. This hardly uses resources
            when no one is around. By running all the time, objects such as
            users and pages are stored in memory, even after the http request of
            our example user has long finished, allowing for a universe to be
            constructed.
        </para>
        <para>
            When <classname>DpServer</classname> and
            <filename>public/dpclient.php</filename> connect,
            <filename>public/dpclient.php</filename> first passes PHP variables
            such as <varname>$_GET</varname>, <varname>$_PUT</varname> and
            <varname>$_SERVER</varname> to <classname>DpServer</classname>, then
            <classname>DpServer</classname> passes the request on to the
            <classname>DpUniverse</classname> object, created from the class in
            <filename>lib/dpuniverse.php</filename>, where all objects reside.
        </para>
        <para>
            In the first DutchPIPE versions, there was no separation between
            <classname>DpServer</classname> and
            <classname>DpUniverse</classname>, and
            <classname>DpServer</classname> was one big class. Logic was
            separated so that <classname>DpServer</classname> handles
            connections with <filename>public/dpclient.php</filename>, and
            <classname>DpUniverse</classname> handles all objects we're creating
            and storing.
        </para>
        <para>
            <classname>DpUniverse</classname> returns the HTML to
            <classname>DpServer</classname>, representing the page the user is
            requesting, the home page in the example.
            <classname>DpServer</classname> passes it to
            <filename>public/dpclient.php</filename>, which returns it to the
            browser.
        </para>
        <para>
            In the meantime, <classname>DpUniverse</classname> created a user
            object and a page object, and because the script keeps running, they
            remain in memory. If another user enters that page,
            <classname>DpUniverse</classname> notices the previous user object
            and page, and returns HTML which also contains the avatar of the
            other user.
        </para>
    </refsect1>
    <refsect1 id="{@id engine}">
        <title>AJAX Engine</title>
        <para>
            The AJAX system looks like this:
        </para>
        <para>
            <filename>public/dpclient-js.php</filename> &larr;&rarr;
            <filename>public/dpclient.php</filename> &larr;&rarr;
            <classname>DpServer</classname>
            &larr;&rarr; <classname>DpUniverse</classname>
        </para>
        <para>
            The two users we now have, both have
            <filename>public/dpclient-js.php</filename> running in their
            browsers. This javascript makes a connection every 2 seconds
            (depending on your settings) to
            <filename>public/dpclient.php</filename>, to ask if anything
            happened. If nothing happened, '<code>1</code>' is returned.
        </para>
        <para>
            But in the example another user entered the page, so
            <filename>public/dpclient.php</filename> passes some XML over to the
            browser running <filename>public/dpclient-js.php</filename>, and the
            original user gets the message the other user enters the page, and
            sees his avatar.
        </para>
        <para>
            <filename>public/dpclient-js.php</filename> does a couple of things:
        </para>
        <itemizedlist>
            <listitem>
                It passes actions from the user to
                <filename>public/dpclient.php</filename>.
            </listitem>
            <listitem>
                It asks <filename>public/dpclient.php</filename> for updates.
            </listitem>
            <listitem>
                It parses the response from actions and updates, and inserts,
                updates or deletes elements in the page.
            </listitem>
        </itemizedlist>
        <para>
            It will retrieve responses in (pseudo) XML format to show
            messages, pop up those yellow windows, add or delete avatars and
            objects, and so on. In other words, it makes and inserts, or
            updates <code>&lt;div&gt;</code>'s and HTML on the fly, based on the
            XML it obtained.
        </para>
        <para>
            If you perform an action,
            <filename>public/dpclient-js.php</filename> gets a response
            immediately. But to retrieve updates caused by external events,
            <filename>public/dpclient-js.php</filename> performs periodic
            checks.
        </para>
        <para>
            By default, the AJAX engine checks for updates every two seconds.
            If this value is increased, this obviously makes communication
            faster, but has a penalty on your server. DutchPIPE is
            surprisingly lightweight, but if you have many users performing
            AJAX requests all the time, you must understand that DutchPIPE can
            be a strain for your server.
        </para>
        <para>
            Note that two seconds is the maximum time it takes for stuff to be
            communicated. For example, if another user chats a message to you,
            it will be sent to your browser on your next AJAX request, which
            could be in 0.1 seconds if the last one was 1.9 seconds ago. It
            depends on the moment within the 2 second interval the update,
            caused by an external event, took place. This all means that on
            average, the delay is 1 second for waiting XML messages to be
            communicated.
        </para>
    </refsect1>
</refentry>
