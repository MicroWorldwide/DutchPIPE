<refentry id="{@id}">
    <refnamediv>
        <refname>Important Concepts</refname>
        <refpurpose>IMPORTANT CONCEPTS WITHIN A DUTCHPIPE UNIVERSE</refpurpose>
    </refnamediv>
    {@toc}
    <refsect1 id="{@id dpuniversedir}">
        <title>The dpuniverse/ directory</title>
        <para>
            Your universe is constructed from objects in the following
            directory:
        </para>
        <para><filename>dpuniverse/</filename></para>
        <para>
            The <filename>dpuniverse/</filename> directory contains
            subdirectories for pages, "non playing characters" (bots) and other
            objects: <filename>dpuniverse/page/</filename>,
            <filename>dpuniverse/npc/</filename> and
            <filename>dpuniverse/obj/</filename>.
        </para>
    </refsect1>
    <refsect1 id="{@id fnbasedclasses}">
        <title>Filename based classes</title>
        <para>
            Each <filename>.php</filename> file within
            <filename>dpuniverse/</filename> should contain only one class,
            with the classname the same as the filename, without
            <filename>.php</filename>, and the first letter in upper case. For
            example:
        </para>
        <para>
            <filename>dpuniverse/page/bar.php</filename> defines class
            {@link Bar}
        </para>
        <para>
            Class names must be unique. See {@tutorial issues.pkg} for more
            information about this limitation.
        </para>
    </refsect1>
    <refsect1 id="{@id universeobj}">
        <title>The universe object</title>
        <para>
            The universe object is created when the DutchPIPE server is started,
            keeps track of all objects in the site and sports a number of
            important methods you can call.
        </para>
        <para>
            A reference to the universe object is obtained by the
            {@link dpfunctions.php#get_current_dbuniverse()} method. Example:
        </para>
        <programlisting role="php">
<![CDATA[
$universe = get_current_dbuniverse();
$note = $universe->newDpObject('/obj/note.php');
]]>
        </programlisting>
        <para>
            See {@link DpUniverse} for a list of callable methods in this
            object.
        </para>
    </refsect1>
    <refsect1 id="{@id stdclass}">
        <title>The standard class</title>
        <para>
            Each object extends on the {@link DpObject} class from
            <filename>dpuniverse/std/DpObject.php</filename>,
            either directly, or by using a class that extends on it.
        </para>
    </refsect1>
    <refsect1 id="{@id otherclasses}">
        <title>Other standard classes</title>
        <para>
            Other standard classes provide several building blocks for your
            site:
        </para>
        <para>
            {@link DpPage} to make a page;
        </para>
        <para>
            {@link DpNpc} to make a non playing character (a bot);
        </para>
        <para>
            {@link DpDrink} to make a drink.
        </para>
        <para>
            They all extend on {@link DpObject}.
        </para>
    </refsect1>
    <refsect1 id="{@id invenv}">
        <title>Inventory, environment</title>
        <para>
            Objects can "contain" other objects. You can call the getEnvironment
            and getInventory methods in all objects to see how they are related
            to the objects surrounding them or contained in them:
        </para>
        <programlisting role="php">
<![CDATA[
/* List of what the user is carrying */
$inv = $user->getInventory();
foreach ($inv as &$ob) {
    get_current_dpuser()->tell($ob->getTitle() . '<br />');
}
]]>
        </programlisting>
        <programlisting role="php">
<![CDATA[
$env = $note->getEnvironment();
if ($env->getProperty('is_page')) {
   ... /* The note is sitting on the page */
} elseif ($env->getProperty('is_user')) {
   ... /* Someone is carrying the note */
}
]]>
        </programlisting>
    </refsect1>
    <refsect1 id="{@id movingobjs}">
        <title>Moving objects</title>
        <para>
            Call moveDpObject in objects to move them around, for example:
        </para>
        <programlisting role="php">
<![CDATA[
/* Moves note to inventory of user */
$note->moveDpObject($user);

/* Moves note to page */
$note->moveDpObject($user->getEnvironment());
]]>
        </programlisting>
    </refsect1>
</refentry>
